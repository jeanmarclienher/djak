
class Aemmiter {
field string _data;
field string _head;
field Aclass clas;
field string class_name;
field buffer _proc;
field buffer _stk;
field buffer _expr_stk;
field Atoken token1;
field Atoken token2;
field int pass;

constructor Aemmiter new()
{
	_proc := buffer.new(100);
	_stk := buffer.new(100);
	_expr_stk := buffer.new(100);
	_data := string.new(1024);
	_head := string.new(1024);
	token1 := null;
	token2 := null;
	return this;
}

method void dispose()
{
	_proc.dispose();
	_stk.dispose();
	_data.dispose();
	_expr_stk.dispose();
	std.free(this);
	return;
}

method int emmit(in Aparser par)
{
	clas := par.get_next();
	while (clas != null) {
		gen_class();
		clas := clas.get_next();
	}
	console.log(_head);
	console.log(_data);
	return 1;
}

method void gen_class()
{
        var Atoken to;
	var response res;
        res := response.new(object.$CAemmiter, this);


       	to := clas.get_name();
       	class_name := to.get_data();
	_data.add("// class ");
       	_data.add(class_name);
	_data.add("\n");

	pass := 0;
	while (pass < 7) {
        	clas.foreach_members(res);
		pass := pass + 1;
	}
        res.dispose();
	return;
}

method void each(in response res)
{
	var int k;
	var Amember mb;
	var string str;
	str := string.new(8);
	mb := res.get_bytes();
	k := mb.get_kind();
	if (pass == 0) {
		pass_0(res, str, mb, k);
	} else if (pass == 1) {
		pass_1(res, str, mb, k);
	} else if (pass == 2) {
		pass_2(res, str, mb, k);
	} else if (pass == 3) {
		pass_3(res, str, mb, k);
	} else if (pass == 4) {
		pass_4(res, str, mb, k);
	} else if (pass == 5) {
		pass_5(res, str, mb, k);
	} else if (pass == 6) {
		pass_6(res, str, mb, k);
	}
	str.dispose();
        return;
}


method void pass_0(in response res, io string str, in Amember mb, in int k)
{
	var Atoken t;
	if (k == Aclass.$Cconst) {
		t := mb.get_initial_value();
		_data.add("#define DEF__");
       		_data.add(class_name);
		_data.add("__");
        	_data.add(res.get_string());
		_data.add(" ");
		_data.add(t.get_data());
		_data.add("\n");
	}
	return;
}

method void pass_1(in response res, io string str, in Amember mb, in int k)
{
	if (k == Aclass.$Cstatic) {
		_data.add("static var ");
       		_data.add(class_name);
		_data.add("__");
        	_data.add(res.get_string());
		_data.add(" = 0;\n");
	}
	return;
}

method void pass_2(in response res, io string str, in Amember mb, in int k)
{	
	if (k == Aclass.$Cfield) {
		_data.add("#define ");
		_data.add("__");
        	_data.add(res.get_string());
		_data.add(" (__this+");
		str.set_int(mb.get_index());
		_data.add(str);
		_data.add(")\n");
	}
	return;
}

method void pad(in int depth)
{
	while (depth > 0) {
		_data.add("\t");
		depth := depth - 1;
	}
	return;
}

method void expr_gen2(in Aexpr expr, in string op)
{
	var Aexpr ex1;
	var Aexpr ex2;
	var string s;
	ex2 := _expr_stk.pop();
	ex1 := _expr_stk.pop();
	_expr_stk.push(expr);
	s := string.new(8);
	s.add("(");
	s.add(ex1.get_value());
	s.add(")");
	s.add(op);
	s.add("(");
	s.add(ex2.get_value());
	s.add(")");
	expr.set_value(s);
	return;
}

method void expr_process(in Aexpr expr)
{
	var int op;
	var Aexpr ex;

	op := expr.get_op();
	if (op < 1000) {
		_expr_stk.push(expr);
		return;
	}
	if (op == Aclass.$Croot) {
		if (_expr_stk.length() != 1) {
			error("wrong expression...");
			return;
		}
		ex := _expr_stk.pop();
		_data.add(ex.get_value());
	} else if (op == Aclass.$Cequal) {
		expr_gen2(expr, "==");
	} else if (op == Aclass.$Cnotequal) {
		expr_gen2(expr, "!=");
	} else if (op == Aclass.$Clargerequal) {
	} else if (op == Aclass.$Clesserequal) {
 	} else if (op == Aclass.$Clarger) {
 	} else if (op == Aclass.$Clesser) {
 	} else if (op == Aclass.$Clogicaland) {
		expr_gen2(expr, "&&");
	} else if (op == Aclass.$Clogicalor) {
		expr_gen2(expr, "||");
 	} else if (op == Aclass.$Cadd) {
 	} else if (op == Aclass.$Csub) {
 	} else if (op == Aclass.$Cmult) {
 	} else if (op == Aclass.$Cdiv) {
 	} else if (op == Aclass.$Cmodulo) {
 	} else if (op == Aclass.$Clogicalnot) {
 	} else if (op == Aclass.$Cparenthesis) {
 	} else if (op == Aclass.$Cunaryplus) {
 	} else if (op == Aclass.$Cunaryminus) {
	} else {
		error("UNKNOW OP\n");
		return;
	}
	return;
}

method void expr_gen(in Aexpr expr)
{
	var Aexpr ex;
	var Aexpr ex1;
	var buffer stack;
	stack := buffer.new(4);
	ex := expr.get_right();
	ex := expr;
	ex.set_flags(0);
	stack.push(ex);
	while (stack.length() > 0) {
		ex := stack.get_last();
		if (ex.get_flags() != 0) {
			ex := stack.pop();
			expr_process(ex);
		} else {
			ex1 := ex;
			ex.set_flags(1);
			ex := ex.get_right();
			if (ex != null) {
				ex.set_flags(0);
				stack.push(ex);
			}
			ex := ex1.get_left();
			if  (ex != null) {
				ex.set_flags(0);
				stack.push(ex);
			}
		}
	}
	stack.dispose();
	return;
}

method void body_gen(in buffer vars_, in buffer body_)
{
	var int l, i;
	var Atoken tok;
	var Amember va;
	var Astatement stm;
	var int ty;
	var buffer stack;
	var int padde;
	var Aexpr ex;

	_data.add("{\n");
	stack := buffer.new(4);
	if (vars_ != null) {
		l := vars_.length();
	} else {
		l := 0;
	}
	i := 0;
	while (i < l) {
		va := vars_.get_at(i);
		tok := va.get_name();
		_data.add("\tvar ");
		_data.add(tok.get_data());
		_data.add(";\n");
		i := i + 1;
	}

	l := body_.length();
	i := 0;
	padde := 1;
	while (i < l) {
		stm := body_.get_at(i);
		ty := stm.get_type();
		if ((ty != Aclass.$Celseif) && (ty != Aclass.$Celse)) {
			_data.add("\n");
			pad(padde);
		}
		if ((ty == Aclass.$Cif) || (ty == Aclass.$Celseif)) {
			if (ty == Aclass.$Celseif) {
				_data.add(" else if (");
			} else {
				_data.add("if (");
			}
			ex := stm.get_expression();
			if (ex != null) {
				expr_gen(ex);
			}	
			_data.add(") {");
			stack.push(l);
			stack.push(i + 1);
			stack.push(body_);
			body_ := stm.get_else();
			if (body_ != null) {
				stack.push(body_.length());
				stack.push(0);
				stack.push(body_);
			}
			padde := padde + 1;
			i := -1;
			l := 0;
			if (body_ != null) {
				body_ := stm.get_statements();
				l := body_.length();
			}
		} else if (ty == Aclass.$Celse) {
			_data.add(" else {");
			padde := padde + 1;
		} else if (ty == Aclass.$Cbreak) {
			_data.add("break");
		} else if (ty == Aclass.$Creturn) {
			_data.add("return");
		} else if (ty == Aclass.$Cdo) {
			_data.add("DO ");
		} else if (ty == Aclass.$Clet) {
			_data.add("LET ");
		} else if (ty == Aclass.$Cwhile) {
			_data.add("while () {");
			stack.push(l);
			stack.push(i + 1);
			stack.push(body_);
			i := -1;
			l := 0;
			body_ := stm.get_statements();
			if (body_ != null) {
				l := body_.length();
			}
			padde := padde + 1;
		} else {
			_data.add("ERROR !!");
		}
		i := i + 1;
		if (i >= l) {
			padde := padde - 1;
			_data.add("\n");
			pad(padde);
			_data.add("}");
		}
	
		while ((i >= l) && (stack.length() > 0)) {
			body_ := stack.pop();
			i := stack.pop();
			l := stack.pop();
			if (i >= l) {
				padde := padde - 1;
				_data.add("\n");
				pad(padde);
				_data.add("}");
			}
		}
	}
	_data.add("\n");
	stack.dispose();
	return;
}

method void pass_3(in response res, io string str, in Amember mb, in int k)
{
	var Amember param;
	var buffer vars;
	var buffer params;
	var buffer body;
	var int sub;
	var int i;
	var int l; 
	var Atoken tok;

	sub := 0;
	if (k == Aclass.$Cconstructor) {
		sub := 1;
	} else if (k == Aclass.$Cfunction) {
		sub := 1;
	} else if (k == Aclass.$Cmethod) {
		sub := 1;
	} else if (k == Aclass.$Cvirtual) {
		sub := 1;
	}
	if (sub != 0) {
		tok := mb.get_type_id();
		if (tok != null) {
			_data.add(tok.get_data());
		}
		_data.add(" ");
        	_data.add(res.get_string());
		params := mb.get_params();
		_data.add("(");
		if (params != null) {
			l := params.length();
			i := 0;
			while (i < l) {
				param := params.get_at(i);
				if (i > 0) {
					_data.add(", ");
				}
				tok := param.get_name();
				_data.add(tok.get_data());
				i := i + 1;
			}
		}
		_data.add(")\n");
		vars := mb.get_vars();
		body := mb.get_body();
		if (body != null) {
			body_gen(vars, body);
		}
	}
	return;
}
	
method void pass_4(in response res, io string str, in Amember mb, in int k)
{
	return;
}
	
method void pass_5(in response res, io string str, in Amember mb, in int k)
{
		
	str.set_int(mb.get_kind());
	_data.add(str);
       	_data.add(res.get_string());
	_data.add("\n");
	return;
}

method void pass_6(in response res, io string str, in Amember mb, in int k)
{	
	if (k == Aclass.$Cfield) {
		_data.add("#undef ");
		_data.add("__");
        	_data.add(res.get_string());
		_data.add("\n");
	}
	return;
}


method void error(in string e)
{
	console.log(e);
	dump();
	std.exit(-1);
	return;
}
	
method void dump()
{
/*
	var linked c;
	var Atoken to;
	var string s;
	var int l;
	l := _proc.length();

	while (l > 0) {
		l := l - 1;
		c := _proc.get_at(l);
		to := c.get_data1();
		s := to.get_data();
		if (s != null) {
			console.log_int(c.get_flags());
			console.log(s);
		}
	}
*/
	return;
}

} // class
