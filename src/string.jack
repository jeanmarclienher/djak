class string {
field array _str;
field int size;

constructor string new(in int alloc)
{
	_str := array.new(alloc + 1);
	_str[0] := '\0';
	size := alloc;
	return this;
}

method void dispose()
{
	_str.dispose();
	std.free(this);
	return;
}

method array get_buf()
{
	return _str;
}

method int get_size()
{
	return size;
}

method void set_size(in int ns)
{
	var array ops;
	var int i, tl;

	tl := length();
	ns := ns + 1;

	if (size > ns) {
		return;
	}
	ops := array.new(ns);
	i := 0;
	while (i < tl) {
		ops[i] := _str[i];
		i := i + 1;
	}
	ops[i] := '\0';	
	_str.dispose();
	_str := ops;
	size := ns - 1;
	return;

}

method int length()
{
	var int l;
	l := 0;
	while (l < size) {
		if (_str[l] == '\0') {
			return l;
		}
		l := l + 1;
	}
	return l;
}

method void set_int(in int num)
{
	var int max;
	var int next;
	var int rem;
	var int v;
	var int prt;

	max := 10;
	next := 100;
	while (next > max) {
		max := next;
		next := next * 10;
	}
	if (num < 0) {
		set("-");
		num := -num;
	} else if (num == 0) {
		set("0");
		return;
	} else {
		set("");
	}
	prt := 0;
	while (max > 1) {
		rem := num / max; // compute the remainder
		rem := rem * max;
		rem := num - rem;

		max := max / 10;
		v := rem / max;
		if (v != 0) {
			prt := 1; // start to print digit after the initials 0s
		}
		if (prt != 0) {
			add_char('0' + v);
		}
		num := num - (v * max);
	}
	return;
}

method void set(in string src)
{
	var int sl, i;
	var array srs;
	sl := src.length();
	if (size < sl) {
		_str.dispose();
		_str := array.new(sl + 1);
		size := sl;
	}
	i := 0;
	srs := src.get_buf();
	while (i < sl) {
		_str[i] := srs[i];
		i := i + 1;
	}
	_str[i] := 0;
	return;
}

method void add_char(in int num)
{
	var array ops;
	var int sl, tl, ns, i;
	sl := 6;
	tl := length();
		
	ns := sl + tl + 1;
	i := 0;
	if (size <= ns) {
		ns := ns + 8;
		ops:= array.new(ns);
		while (i < tl) {
			ops[i] := _str[i];
			i := i + 1;
		}
		_str.dispose();
		_str := ops;
		size := ns;
	} else {
		ops := _str;
	}
	i := tl;
	ops[i] := num; // FIXME UTF-8
	i := i + 1;
	ops[i] := 0;	
	return;
}


method void add(in string src)
{
	var array ops, srs;
	var int sl, tl, i, j, ns;
	sl := src.length();
	tl := length();
	ns := sl + tl + 1;
	ops:= array.new(ns);
	i := 0;
	while (i < tl) {
		ops[i] := _str[i];
		i := i + 1;
	}
	j := 0;
	srs := src.get_buf();
	while (j < sl) {
		ops[i] := srs[j];
		j := j + 1;
		i := i + 1;
	}
	ops[i] := 0;	
	_str.dispose();
	_str := ops;
	size := ns;
	return;
}

method void substr(in int start_pos, int length_, out string result)
{
	var array ops;
	var int i, j;
	var int len;

	len := length();
	if (start_pos < 0) {
		start_pos := start_pos + len;
	}
	if (start_pos < 0) {
		start_pos := 0;
	}
	if (length_ < 0) {
		length_ := len + length_ - start_pos;
	} else if (length_ == 0) {
		length_ := len;
	}

	if ((start_pos >= len) || (length_ < 1)) {
		result.set("");
		return;
	}	
	result.set_size(length_ + 1);
	ops:= result.get_buf();
	i := 0;
	j := 0;
	while ((i < len) && (j < length_)) {
		if (i >= start_pos) {
			ops[j] := _str[i];
			j := j + 1;
		}
		i := i + 1;
	}
	ops[j] := '\0';	
	return;
}


/** the returned string is alloced and must be disposed */
method string to_string()
{
	var string str;
	str := string.new(length() + 1);
	str.set(this);
	return str;
}

method int to_int()
{	
	var int l;
	var int sign;
	var int v;
	var int c;

	l := 0;
	sign := 1;
	if (size == 0) {
		return 0;
	}
	v := 0;
	if (_str[0] == '-') {
		sign := -1;
		l := 1;
	} else if (_str[0] == '+') {
		l := 1;
	}
	while (l < size) {
		c := _str[l];
		if (c == '\0') {
			l := size; // end og string
		} else if ((c >= '0') && (c <= '9')) {
			v := v * 10;
			v := v + (c - '0');
		} else {
			l := size; // end of numbers in string
		}
		l := l + 1;
	}
	return v * sign;
}

method int compare(in string other)
{
	var int l;
	var int v;
	var array os;
	var int osi;
	os := other.get_buf();
	l := 0;
	osi := other.get_size();
	while ((l < size) && (l < osi)) {
		if (_str[l] == '\0') {
			if (os[l] == '\0') {
				return 0;
			} else {
				return -1;
			}
		} else if (os[l] == '\0') {
			return 1;
		}
		v := _str[l] - os[l];
		if (v != 0) {
			return v;
		}
		l := l + 1;
	}
	if (osi > size) {
		return -1;
	} else if (osi < size) {
		return 1;
	}
	return 0;
}

method int get_hash()
{
	var int l;
	var int h;
	l := 0;
	h := 0;
	while (l < size) {
		if (_str[l] == '\0') {
			return h;
		}
		h := (h * 9) + _str[l];
		l := l + 1;
	}
	return h;
}

method int get_at(in int at)
{
	if ((at < size) && (size >= 0)) {
		return _str[at];
	}
	return '\0';
}

method void set_at(in int at, in int v)
{
	if ((at < size) && (size >= 0)) {
		_str[at] := v; // FIXME UTF-8
	}
	return;
}


} // class

