class string {
field array _str;
field int size;

constructor string new(in int alloc)
{
	_str := std.stralloc(alloc + 1);
	size := alloc;
	return this;
}

method void dispose()
{
	std.strfree(_str);
	std.free(this); // FIXME
	return;
}


method array get_buf()
{
	return _str;
}

method int get_size()
{
	return size;
}

method void set_size(in int ns)
{
	var array ops;
	if (size > ns) {
		return;
	}
	ops := std.stralloc(ns+1);
	std.strcat(ops, _str, ns);
	std.strfree(_str);
	_str := ops;
	size := ns;
	return;

}

method int length()
{
	return std.strlen(_str);
}

method void set_int(in int num)
{
	return std.str_set_int(_str, size, num);
}

method void set(in string src)
{
	var int sl;
	sl := std.strlen(src.get_buf());
	if (size < sl) {
		std.strfree(_str);
		_str := std.stralloc(sl+1);
		size := sl;
	}
	std.str_set_at(_str, 0, '\0');
	std.strcat(_str, src.get_buf(), sl);
	return;
}

method void add_char(in int num)
{
	var array ops;
	var int sl, tl, ns, i;
	sl := 6;
	tl := std.strlen(_str);
		
	ns := sl + tl + 1;
	i := 0;
	if (size <= ns) {
		ns := ns + 8;
		ops := std.stralloc(ns);
		std.strcat(ops, _str, ns);
		std.strfree(_str);
		_str := ops;
		size := ns;
	}
	i := tl;
	std.str_set_at(_str, i, num); // FIXME UTF-8
	i := i + 1;
	std.str_set_at(_str, i, '\0');
	return;
}


method void add(in string src)
{
	var array ops;
	var int sl, tl, ns;
	sl := std.strlen(src.get_buf());
	tl := std.strlen(_str);
	ns := sl + tl + 1;
	ops := std.stralloc(ns);
	std.strcat(ops, _str, ns);
	std.strcat(ops, src.get_buf(), ns);
	std.strfree(_str);
	_str := ops;
	size := ns;
	return;
}

method int indexof(in int start_pos, in string needle)
{
	return std.strindex(_str, start_pos, needle.get_buf());
}



method void substr(in int start_pos, in int length_, out string result)
{
	var array ops;
	var int len;

	len := std.strlen(_str);
	if (start_pos < 0) {
		start_pos := start_pos + len;
	}
	if (start_pos < 0) {
		start_pos := 0;
	}
	if (length_ < 0) {
		length_ := len + length_ - start_pos;
	} else if (length_ == 0) {
		length_ := len;
	}

	if ((start_pos >= len) || (length_ < 1)) {
		result.set("");
		return;
	}	
	result.set_size(length_ + 1);
	ops:= result.get_buf();
	std.str_set_at(ops, 0, '\0');
	std.strsub(ops, start_pos, _str, length_);
	return;
}


/** the returned string is alloced and must be disposed */
method string to_string()
{
	var string str;
	str := string.new(length() + 1);
	str.set(this);
	return str;
}

method int to_int()
{	
	var int l;
	var int sign;
	var int v;
	var int c;

	l := 0;
	sign := 1;
	if (size == 0) {
		return 0;
	}
	v := 0;
	if (std.str_get_at(_str, 0) == '-') {
		sign := -1;
		l := 1;
	} else if (std.str_get_at(_str,0) == '+') {
		l := 1;
	}
	while (l < size) {
		c := std.str_get_at(_str,l);
		if (c == '\0') {
			l := size; // end og string
		} else if ((c >= '0') && (c <= '9')) {
			v := v * 10;
			v := v + (c - '0');
		} else {
			l := size; // end of numbers in string
		}
		l := l + 1;
	}
	return v * sign;
}

method int compare(in string other)
{
	return std.strcmp(_str, other.get_buf());
}

method int get_hash()
{
	return std.strhash(_str);
}

method int get_at(in int at)
{
	if ((at < size) && (size >= 0)) {
		return std.str_get_at(_str,at);
	}
	return '\0';
}

method void set_at(in int at, in int v)
{
	if ((at < size) && (size >= 0)) {
		std.str_set_at(_str, at, v); // FIXME UTF-8
	}
	return;
}


} // class

